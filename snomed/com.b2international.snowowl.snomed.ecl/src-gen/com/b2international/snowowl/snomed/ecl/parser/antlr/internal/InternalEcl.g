/*
 * generated by Xtext
 */
grammar InternalEcl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.b2international.snowowl.snomed.ecl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.b2international.snowowl.snomed.ecl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.b2international.snowowl.snomed.ecl.services.EclGrammarAccess;

}

@parser::members {

 	private EclGrammarAccess grammarAccess;
 	
    public InternalEclParser(TokenStream input, EclGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ExpressionConstraint";	
   	}
   	
   	@Override
   	protected EclGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpressionConstraint
entryRuleExpressionConstraint returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionConstraintRule()); }
	 iv_ruleExpressionConstraint=ruleExpressionConstraint 
	 { $current=$iv_ruleExpressionConstraint.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ExpressionConstraint
ruleExpressionConstraint returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionConstraintAccess().getOrExpressionConstraintParserRuleCall()); 
    }
    this_OrExpressionConstraint_0=ruleOrExpressionConstraint
    { 
        $current = $this_OrExpressionConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleOrExpressionConstraint
entryRuleOrExpressionConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpressionConstraintRule()); }
	 iv_ruleOrExpressionConstraint=ruleOrExpressionConstraint 
	 { $current=$iv_ruleOrExpressionConstraint.current; } 
	 EOF 
;

// Rule OrExpressionConstraint
ruleOrExpressionConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpressionConstraintAccess().getAndExpressionConstraintParserRuleCall_0()); 
    }
    this_AndExpressionConstraint_0=ruleAndExpressionConstraint
    { 
        $current = $this_AndExpressionConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpressionConstraintAccess().getOrExpressionConstraintLeftAction_1_0(),
            $current);
    }
)this_OR_2=RULE_OR
    { 
    newLeafNode(this_OR_2, grammarAccess.getOrExpressionConstraintAccess().getORTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpressionConstraintAccess().getRightAndExpressionConstraintParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExpressionConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpressionConstraintRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExpressionConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExpressionConstraint
entryRuleAndExpressionConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpressionConstraintRule()); }
	 iv_ruleAndExpressionConstraint=ruleAndExpressionConstraint 
	 { $current=$iv_ruleAndExpressionConstraint.current; } 
	 EOF 
;

// Rule AndExpressionConstraint
ruleAndExpressionConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpressionConstraintAccess().getExclusionExpressionConstraintParserRuleCall_0()); 
    }
    this_ExclusionExpressionConstraint_0=ruleExclusionExpressionConstraint
    { 
        $current = $this_ExclusionExpressionConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpressionConstraintAccess().getAndExpressionConstraintLeftAction_1_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getAndExpressionConstraintAccess().getAndOperatorParserRuleCall_1_1()); 
    }
ruleAndOperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpressionConstraintAccess().getRightExclusionExpressionConstraintParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExclusionExpressionConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpressionConstraintRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ExclusionExpressionConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExclusionExpressionConstraint
entryRuleExclusionExpressionConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExclusionExpressionConstraintRule()); }
	 iv_ruleExclusionExpressionConstraint=ruleExclusionExpressionConstraint 
	 { $current=$iv_ruleExclusionExpressionConstraint.current; } 
	 EOF 
;

// Rule ExclusionExpressionConstraint
ruleExclusionExpressionConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExclusionExpressionConstraintAccess().getRefinedExpressionConstraintParserRuleCall_0()); 
    }
    this_RefinedExpressionConstraint_0=ruleRefinedExpressionConstraint
    { 
        $current = $this_RefinedExpressionConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExclusionExpressionConstraintAccess().getExclusionExpressionConstraintLeftAction_1_0(),
            $current);
    }
)this_MINUS_2=RULE_MINUS
    { 
    newLeafNode(this_MINUS_2, grammarAccess.getExclusionExpressionConstraintAccess().getMINUSTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExclusionExpressionConstraintAccess().getRightRefinedExpressionConstraintParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRefinedExpressionConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExclusionExpressionConstraintRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RefinedExpressionConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRefinedExpressionConstraint
entryRuleRefinedExpressionConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefinedExpressionConstraintRule()); }
	 iv_ruleRefinedExpressionConstraint=ruleRefinedExpressionConstraint 
	 { $current=$iv_ruleRefinedExpressionConstraint.current; } 
	 EOF 
;

// Rule RefinedExpressionConstraint
ruleRefinedExpressionConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRefinedExpressionConstraintAccess().getDottedExpressionConstraintParserRuleCall_0()); 
    }
    this_DottedExpressionConstraint_0=ruleDottedExpressionConstraint
    { 
        $current = $this_DottedExpressionConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRefinedExpressionConstraintAccess().getRefinedExpressionConstraintConstraintAction_1_0(),
            $current);
    }
)this_COLON_2=RULE_COLON
    { 
    newLeafNode(this_COLON_2, grammarAccess.getRefinedExpressionConstraintAccess().getCOLONTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRefinedExpressionConstraintAccess().getRefinementRefinementParserRuleCall_1_2_0()); 
	    }
		lv_refinement_3_0=ruleRefinement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefinedExpressionConstraintRule());
	        }
       		set(
       			$current, 
       			"refinement",
        		lv_refinement_3_0, 
        		"Refinement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDottedExpressionConstraint
entryRuleDottedExpressionConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDottedExpressionConstraintRule()); }
	 iv_ruleDottedExpressionConstraint=ruleDottedExpressionConstraint 
	 { $current=$iv_ruleDottedExpressionConstraint.current; } 
	 EOF 
;

// Rule DottedExpressionConstraint
ruleDottedExpressionConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDottedExpressionConstraintAccess().getSimpleExpressionConstraintParserRuleCall_0()); 
    }
    this_SimpleExpressionConstraint_0=ruleSimpleExpressionConstraint
    { 
        $current = $this_SimpleExpressionConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDottedExpressionConstraintAccess().getDottedExpressionConstraintConstraintAction_1_0(),
            $current);
    }
)this_DOT_2=RULE_DOT
    { 
    newLeafNode(this_DOT_2, grammarAccess.getDottedExpressionConstraintAccess().getDOTTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDottedExpressionConstraintAccess().getAttributeAttributeParserRuleCall_1_2_0()); 
	    }
		lv_attribute_3_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDottedExpressionConstraintRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_3_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSimpleExpressionConstraint
entryRuleSimpleExpressionConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleExpressionConstraintRule()); }
	 iv_ruleSimpleExpressionConstraint=ruleSimpleExpressionConstraint 
	 { $current=$iv_ruleSimpleExpressionConstraint.current; } 
	 EOF 
;

// Rule SimpleExpressionConstraint
ruleSimpleExpressionConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionConstraintAccess().getChildOfParserRuleCall_0()); 
    }
    this_ChildOf_0=ruleChildOf
    { 
        $current = $this_ChildOf_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionConstraintAccess().getDescendantOfParserRuleCall_1()); 
    }
    this_DescendantOf_1=ruleDescendantOf
    { 
        $current = $this_DescendantOf_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionConstraintAccess().getDescendantOrSelfOfParserRuleCall_2()); 
    }
    this_DescendantOrSelfOf_2=ruleDescendantOrSelfOf
    { 
        $current = $this_DescendantOrSelfOf_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionConstraintAccess().getParentOfParserRuleCall_3()); 
    }
    this_ParentOf_3=ruleParentOf
    { 
        $current = $this_ParentOf_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionConstraintAccess().getAncestorOfParserRuleCall_4()); 
    }
    this_AncestorOf_4=ruleAncestorOf
    { 
        $current = $this_AncestorOf_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionConstraintAccess().getAncestorOrSelfOfParserRuleCall_5()); 
    }
    this_AncestorOrSelfOf_5=ruleAncestorOrSelfOf
    { 
        $current = $this_AncestorOrSelfOf_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleExpressionConstraintAccess().getFocusConceptParserRuleCall_6()); 
    }
    this_FocusConcept_6=ruleFocusConcept
    { 
        $current = $this_FocusConcept_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFocusConcept
entryRuleFocusConcept returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFocusConceptRule()); }
	 iv_ruleFocusConcept=ruleFocusConcept 
	 { $current=$iv_ruleFocusConcept.current; } 
	 EOF 
;

// Rule FocusConcept
ruleFocusConcept returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFocusConceptAccess().getMemberOfParserRuleCall_0()); 
    }
    this_MemberOf_0=ruleMemberOf
    { 
        $current = $this_MemberOf_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFocusConceptAccess().getConceptReferenceParserRuleCall_1()); 
    }
    this_ConceptReference_1=ruleConceptReference
    { 
        $current = $this_ConceptReference_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFocusConceptAccess().getAnyParserRuleCall_2()); 
    }
    this_Any_2=ruleAny
    { 
        $current = $this_Any_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFocusConceptAccess().getNestedExpressionParserRuleCall_3()); 
    }
    this_NestedExpression_3=ruleNestedExpression
    { 
        $current = $this_NestedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleChildOf
entryRuleChildOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChildOfRule()); }
	 iv_ruleChildOf=ruleChildOf 
	 { $current=$iv_ruleChildOf.current; } 
	 EOF 
;

// Rule ChildOf
ruleChildOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LT_EM_0=RULE_LT_EM
    { 
    newLeafNode(this_LT_EM_0, grammarAccess.getChildOfAccess().getLT_EMTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChildOfAccess().getConstraintFocusConceptParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleFocusConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChildOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"FocusConcept");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDescendantOf
entryRuleDescendantOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDescendantOfRule()); }
	 iv_ruleDescendantOf=ruleDescendantOf 
	 { $current=$iv_ruleDescendantOf.current; } 
	 EOF 
;

// Rule DescendantOf
ruleDescendantOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LT_0=RULE_LT
    { 
    newLeafNode(this_LT_0, grammarAccess.getDescendantOfAccess().getLTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDescendantOfAccess().getConstraintFocusConceptParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleFocusConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDescendantOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"FocusConcept");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDescendantOrSelfOf
entryRuleDescendantOrSelfOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDescendantOrSelfOfRule()); }
	 iv_ruleDescendantOrSelfOf=ruleDescendantOrSelfOf 
	 { $current=$iv_ruleDescendantOrSelfOf.current; } 
	 EOF 
;

// Rule DescendantOrSelfOf
ruleDescendantOrSelfOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_DBL_LT_0=RULE_DBL_LT
    { 
    newLeafNode(this_DBL_LT_0, grammarAccess.getDescendantOrSelfOfAccess().getDBL_LTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDescendantOrSelfOfAccess().getConstraintFocusConceptParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleFocusConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDescendantOrSelfOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"FocusConcept");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParentOf
entryRuleParentOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParentOfRule()); }
	 iv_ruleParentOf=ruleParentOf 
	 { $current=$iv_ruleParentOf.current; } 
	 EOF 
;

// Rule ParentOf
ruleParentOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_GT_EM_0=RULE_GT_EM
    { 
    newLeafNode(this_GT_EM_0, grammarAccess.getParentOfAccess().getGT_EMTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParentOfAccess().getConstraintFocusConceptParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleFocusConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParentOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"FocusConcept");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAncestorOf
entryRuleAncestorOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAncestorOfRule()); }
	 iv_ruleAncestorOf=ruleAncestorOf 
	 { $current=$iv_ruleAncestorOf.current; } 
	 EOF 
;

// Rule AncestorOf
ruleAncestorOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_GT_0=RULE_GT
    { 
    newLeafNode(this_GT_0, grammarAccess.getAncestorOfAccess().getGTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAncestorOfAccess().getConstraintFocusConceptParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleFocusConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAncestorOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"FocusConcept");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAncestorOrSelfOf
entryRuleAncestorOrSelfOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAncestorOrSelfOfRule()); }
	 iv_ruleAncestorOrSelfOf=ruleAncestorOrSelfOf 
	 { $current=$iv_ruleAncestorOrSelfOf.current; } 
	 EOF 
;

// Rule AncestorOrSelfOf
ruleAncestorOrSelfOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_DBL_GT_0=RULE_DBL_GT
    { 
    newLeafNode(this_DBL_GT_0, grammarAccess.getAncestorOrSelfOfAccess().getDBL_GTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAncestorOrSelfOfAccess().getConstraintFocusConceptParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleFocusConcept		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAncestorOrSelfOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"FocusConcept");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMemberOf
entryRuleMemberOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberOfRule()); }
	 iv_ruleMemberOf=ruleMemberOf 
	 { $current=$iv_ruleMemberOf.current; } 
	 EOF 
;

// Rule MemberOf
ruleMemberOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_CARET_0=RULE_CARET
    { 
    newLeafNode(this_CARET_0, grammarAccess.getMemberOfAccess().getCARETTerminalRuleCall_0()); 
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberOfAccess().getConstraintConceptReferenceParserRuleCall_1_0_0()); 
	    }
		lv_constraint_1_1=ruleConceptReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_1, 
        		"ConceptReference");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMemberOfAccess().getConstraintAnyParserRuleCall_1_0_1()); 
	    }
		lv_constraint_1_2=ruleAny		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_2, 
        		"Any");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleConceptReference
entryRuleConceptReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConceptReferenceRule()); }
	 iv_ruleConceptReference=ruleConceptReference 
	 { $current=$iv_ruleConceptReference.current; } 
	 EOF 
;

// Rule ConceptReference
ruleConceptReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConceptReferenceAccess().getIdSnomedIdentifierParserRuleCall_0_0()); 
	    }
		lv_id_0_0=ruleSnomedIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptReferenceRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"SnomedIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_PIPE_1=RULE_PIPE
    { 
    newLeafNode(this_PIPE_1, grammarAccess.getConceptReferenceAccess().getPIPETerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConceptReferenceAccess().getTermTermParserRuleCall_1_1_0()); 
	    }
		lv_term_2_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptReferenceRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_2_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)this_PIPE_3=RULE_PIPE
    { 
    newLeafNode(this_PIPE_3, grammarAccess.getConceptReferenceAccess().getPIPETerminalRuleCall_1_2()); 
    }
)?)
;





// Entry rule entryRuleAny
entryRuleAny returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnyRule()); }
	 iv_ruleAny=ruleAny 
	 { $current=$iv_ruleAny.current; } 
	 EOF 
;

// Rule Any
ruleAny returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_WILDCARD_0=RULE_WILDCARD
    { 
    newLeafNode(this_WILDCARD_0, grammarAccess.getAnyAccess().getWILDCARDTerminalRuleCall_0()); 
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnyAccess().getAnyAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleRefinement
entryRuleRefinement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefinementRule()); }
	 iv_ruleRefinement=ruleRefinement 
	 { $current=$iv_ruleRefinement.current; } 
	 EOF 
;

// Rule Refinement
ruleRefinement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getRefinementAccess().getOrRefinementParserRuleCall()); 
    }
    this_OrRefinement_0=ruleOrRefinement
    { 
        $current = $this_OrRefinement_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrRefinement
entryRuleOrRefinement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRefinementRule()); }
	 iv_ruleOrRefinement=ruleOrRefinement 
	 { $current=$iv_ruleOrRefinement.current; } 
	 EOF 
;

// Rule OrRefinement
ruleOrRefinement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrRefinementAccess().getAndRefinementParserRuleCall_0()); 
    }
    this_AndRefinement_0=ruleAndRefinement
    { 
        $current = $this_AndRefinement_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrRefinementAccess().getOrRefinementLeftAction_1_0(),
            $current);
    }
)this_OR_2=RULE_OR
    { 
    newLeafNode(this_OR_2, grammarAccess.getOrRefinementAccess().getORTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrRefinementAccess().getRightAndRefinementParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndRefinement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRefinementRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndRefinement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndRefinement
entryRuleAndRefinement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRefinementRule()); }
	 iv_ruleAndRefinement=ruleAndRefinement 
	 { $current=$iv_ruleAndRefinement.current; } 
	 EOF 
;

// Rule AndRefinement
ruleAndRefinement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndRefinementAccess().getSubRefinementParserRuleCall_0()); 
    }
    this_SubRefinement_0=ruleSubRefinement
    { 
        $current = $this_SubRefinement_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndRefinementAccess().getAndRefinementLeftAction_1_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getAndRefinementAccess().getAndOperatorParserRuleCall_1_1()); 
    }
ruleAndOperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndRefinementAccess().getRightSubRefinementParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSubRefinement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRefinementRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SubRefinement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSubRefinement
entryRuleSubRefinement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubRefinementRule()); }
	 iv_ruleSubRefinement=ruleSubRefinement 
	 { $current=$iv_ruleSubRefinement.current; } 
	 EOF 
;

// Rule SubRefinement
ruleSubRefinement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSubRefinementAccess().getAttributeConstraintParserRuleCall_0()); 
    }
    this_AttributeConstraint_0=ruleAttributeConstraint
    { 
        $current = $this_AttributeConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSubRefinementAccess().getAttributeGroupParserRuleCall_1()); 
    }
    this_AttributeGroup_1=ruleAttributeGroup
    { 
        $current = $this_AttributeGroup_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleAttributeGroup
entryRuleAttributeGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeGroupRule()); }
	 iv_ruleAttributeGroup=ruleAttributeGroup 
	 { $current=$iv_ruleAttributeGroup.current; } 
	 EOF 
;

// Rule AttributeGroup
ruleAttributeGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeGroupAccess().getCardinalityCardinalityParserRuleCall_0_0()); 
	    }
		lv_cardinality_0_0=ruleCardinality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeGroupRule());
	        }
       		set(
       			$current, 
       			"cardinality",
        		lv_cardinality_0_0, 
        		"Cardinality");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_CURLY_OPEN_1=RULE_CURLY_OPEN
    { 
    newLeafNode(this_CURLY_OPEN_1, grammarAccess.getAttributeGroupAccess().getCURLY_OPENTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeGroupAccess().getRefinementAttributeSetParserRuleCall_2_0()); 
	    }
		lv_refinement_2_0=ruleAttributeSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeGroupRule());
	        }
       		set(
       			$current, 
       			"refinement",
        		lv_refinement_2_0, 
        		"AttributeSet");
	        afterParserOrEnumRuleCall();
	    }

)
)this_CURLY_CLOSE_3=RULE_CURLY_CLOSE
    { 
    newLeafNode(this_CURLY_CLOSE_3, grammarAccess.getAttributeGroupAccess().getCURLY_CLOSETerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleAttributeSet
entryRuleAttributeSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeSetRule()); }
	 iv_ruleAttributeSet=ruleAttributeSet 
	 { $current=$iv_ruleAttributeSet.current; } 
	 EOF 
;

// Rule AttributeSet
ruleAttributeSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAttributeSetAccess().getOrAttributeSetParserRuleCall()); 
    }
    this_OrAttributeSet_0=ruleOrAttributeSet
    { 
        $current = $this_OrAttributeSet_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOrAttributeSet
entryRuleOrAttributeSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrAttributeSetRule()); }
	 iv_ruleOrAttributeSet=ruleOrAttributeSet 
	 { $current=$iv_ruleOrAttributeSet.current; } 
	 EOF 
;

// Rule OrAttributeSet
ruleOrAttributeSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAttributeSetAccess().getAndAttributeSetParserRuleCall_0()); 
    }
    this_AndAttributeSet_0=ruleAndAttributeSet
    { 
        $current = $this_AndAttributeSet_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAttributeSetAccess().getOrAttributeSetLeftAction_1_0(),
            $current);
    }
)this_OR_2=RULE_OR
    { 
    newLeafNode(this_OR_2, grammarAccess.getOrAttributeSetAccess().getORTerminalRuleCall_1_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAttributeSetAccess().getRightAndAttributeSetParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndAttributeSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrAttributeSetRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndAttributeSet");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndAttributeSet
entryRuleAndAttributeSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndAttributeSetRule()); }
	 iv_ruleAndAttributeSet=ruleAndAttributeSet 
	 { $current=$iv_ruleAndAttributeSet.current; } 
	 EOF 
;

// Rule AndAttributeSet
ruleAndAttributeSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAttributeSetAccess().getSubAttributeSetParserRuleCall_0()); 
    }
    this_SubAttributeSet_0=ruleSubAttributeSet
    { 
        $current = $this_SubAttributeSet_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAttributeSetAccess().getAndAttributeSetLeftAction_1_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getAndAttributeSetAccess().getAndOperatorParserRuleCall_1_1()); 
    }
ruleAndOperator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAttributeSetAccess().getRightSubAttributeSetParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleSubAttributeSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndAttributeSetRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"SubAttributeSet");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSubAttributeSet
entryRuleSubAttributeSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubAttributeSetRule()); }
	 iv_ruleSubAttributeSet=ruleSubAttributeSet 
	 { $current=$iv_ruleSubAttributeSet.current; } 
	 EOF 
;

// Rule SubAttributeSet
ruleSubAttributeSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSubAttributeSetAccess().getAttributeConstraintParserRuleCall()); 
    }
    this_AttributeConstraint_0=ruleAttributeConstraint
    { 
        $current = $this_AttributeConstraint_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleAttributeConstraint
entryRuleAttributeConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeConstraintRule()); }
	 iv_ruleAttributeConstraint=ruleAttributeConstraint 
	 { $current=$iv_ruleAttributeConstraint.current; } 
	 EOF 
;

// Rule AttributeConstraint
ruleAttributeConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_reversed_0_0=RULE_REVERSED
		{
			newLeafNode(lv_reversed_0_0, grammarAccess.getAttributeConstraintAccess().getReversedREVERSEDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"reversed",
        		true, 
        		"REVERSED");
	    }

)
)?(
(
		{ 
<<<<<<< feature/ecl-support
	        newCompositeNode(grammarAccess.getAttributeConstraintAccess().getAttributeConceptReferenceParserRuleCall_1_0_0()); 
=======
	        newCompositeNode(grammarAccess.getAttributeConstraintAccess().getAttributeAttributeParserRuleCall_2_0()); 
>>>>>>> be9d8b9 SO-1782: support descendantOf and desc.OrSelfOf in attribute part...
	    }
<<<<<<< feature/ecl-support
		lv_attribute_1_1=ruleConceptReference		{
=======
		lv_attribute_2_0=ruleAttribute		{
>>>>>>> be9d8b9 SO-1782: support descendantOf and desc.OrSelfOf in attribute part...
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeConstraintRule());
	        }
       		set(
       			$current, 
       			"attribute",
<<<<<<< feature/ecl-support
        		lv_attribute_1_1, 
        		"ConceptReference");
=======
        		lv_attribute_2_0, 
        		"Attribute");
>>>>>>> be9d8b9 SO-1782: support descendantOf and desc.OrSelfOf in attribute part...
	        afterParserOrEnumRuleCall();
	    }
<<<<<<< feature/ecl-support

    |		{ 
	        newCompositeNode(grammarAccess.getAttributeConstraintAccess().getAttributeAnyParserRuleCall_1_0_1()); 
	    }
		lv_attribute_1_2=ruleAny		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeConstraintRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_1_2, 
        		"Any");
	        afterParserOrEnumRuleCall();
	    }

)
=======
>>>>>>> be9d8b9 SO-1782: support descendantOf and desc.OrSelfOf in attribute part...

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeConstraintAccess().getComparisonComparisonParserRuleCall_2_0()); 
	    }
		lv_comparison_2_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeConstraintRule());
	        }
       		set(
       			$current, 
       			"comparison",
        		lv_comparison_2_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))
<<<<<<< feature/ecl-support
=======
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getAttributeDescendantOfParserRuleCall_0()); 
    }
    this_AttributeDescendantOf_0=ruleAttributeDescendantOf
    { 
        $current = $this_AttributeDescendantOf_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getAttributeDescendantOrSelfOfParserRuleCall_1()); 
    }
    this_AttributeDescendantOrSelfOf_1=ruleAttributeDescendantOrSelfOf
    { 
        $current = $this_AttributeDescendantOrSelfOf_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getConceptReferenceParserRuleCall_2()); 
    }
    this_ConceptReference_2=ruleConceptReference
    { 
        $current = $this_ConceptReference_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeAccess().getAnyParserRuleCall_3()); 
    }
    this_Any_3=ruleAny
    { 
        $current = $this_Any_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttributeDescendantOf
entryRuleAttributeDescendantOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeDescendantOfRule()); }
	 iv_ruleAttributeDescendantOf=ruleAttributeDescendantOf 
	 { $current=$iv_ruleAttributeDescendantOf.current; } 
	 EOF 
;

// Rule AttributeDescendantOf
ruleAttributeDescendantOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_LT_0=RULE_LT
    { 
    newLeafNode(this_LT_0, grammarAccess.getAttributeDescendantOfAccess().getLTTerminalRuleCall_0()); 
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeDescendantOfAccess().getConstraintConceptReferenceParserRuleCall_1_0_0()); 
	    }
		lv_constraint_1_1=ruleConceptReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeDescendantOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_1, 
        		"ConceptReference");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAttributeDescendantOfAccess().getConstraintAnyParserRuleCall_1_0_1()); 
	    }
		lv_constraint_1_2=ruleAny		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeDescendantOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_2, 
        		"Any");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleAttributeDescendantOrSelfOf
entryRuleAttributeDescendantOrSelfOf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeDescendantOrSelfOfRule()); }
	 iv_ruleAttributeDescendantOrSelfOf=ruleAttributeDescendantOrSelfOf 
	 { $current=$iv_ruleAttributeDescendantOrSelfOf.current; } 
	 EOF 
;

// Rule AttributeDescendantOrSelfOf
ruleAttributeDescendantOrSelfOf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_DBL_LT_0=RULE_DBL_LT
    { 
    newLeafNode(this_DBL_LT_0, grammarAccess.getAttributeDescendantOrSelfOfAccess().getDBL_LTTerminalRuleCall_0()); 
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeDescendantOrSelfOfAccess().getConstraintConceptReferenceParserRuleCall_1_0_0()); 
	    }
		lv_constraint_1_1=ruleConceptReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeDescendantOrSelfOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_1, 
        		"ConceptReference");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getAttributeDescendantOrSelfOfAccess().getConstraintAnyParserRuleCall_1_0_1()); 
	    }
		lv_constraint_1_2=ruleAny		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeDescendantOrSelfOfRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_2, 
        		"Any");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleCardinality
entryRuleCardinality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCardinalityRule()); }
	 iv_ruleCardinality=ruleCardinality 
	 { $current=$iv_ruleCardinality.current; } 
	 EOF 
;

// Rule Cardinality
ruleCardinality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_SQUARE_OPEN_0=RULE_SQUARE_OPEN
    { 
    newLeafNode(this_SQUARE_OPEN_0, grammarAccess.getCardinalityAccess().getSQUARE_OPENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityAccess().getMinNonNegativeIntegerParserRuleCall_1_0()); 
	    }
		lv_min_1_0=ruleNonNegativeInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_1_0, 
        		"NonNegativeInteger");
	        afterParserOrEnumRuleCall();
	    }

)
)this_TO_2=RULE_TO
    { 
    newLeafNode(this_TO_2, grammarAccess.getCardinalityAccess().getTOTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCardinalityAccess().getMaxMaxValueParserRuleCall_3_0()); 
	    }
		lv_max_3_0=ruleMaxValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCardinalityRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_3_0, 
        		"MaxValue");
	        afterParserOrEnumRuleCall();
	    }

)
)this_SQUARE_CLOSE_4=RULE_SQUARE_CLOSE
    { 
    newLeafNode(this_SQUARE_CLOSE_4, grammarAccess.getCardinalityAccess().getSQUARE_CLOSETerminalRuleCall_4()); 
    }
)
>>>>>>> be9d8b9 SO-1782: support descendantOf and desc.OrSelfOf in attribute part...
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getAttributeValueEqualsParserRuleCall_0()); 
    }
    this_AttributeValueEquals_0=ruleAttributeValueEquals
    { 
        $current = $this_AttributeValueEquals_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getAttributeValueNotEqualsParserRuleCall_1()); 
    }
    this_AttributeValueNotEquals_1=ruleAttributeValueNotEquals
    { 
        $current = $this_AttributeValueNotEquals_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttributeValueEquals
entryRuleAttributeValueEquals returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeValueEqualsRule()); }
	 iv_ruleAttributeValueEquals=ruleAttributeValueEquals 
	 { $current=$iv_ruleAttributeValueEquals.current; } 
	 EOF 
;

// Rule AttributeValueEquals
ruleAttributeValueEquals returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_EQUAL_0=RULE_EQUAL
    { 
    newLeafNode(this_EQUAL_0, grammarAccess.getAttributeValueEqualsAccess().getEQUALTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeValueEqualsAccess().getConstraintSimpleExpressionConstraintParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleSimpleExpressionConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeValueEqualsRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"SimpleExpressionConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeValueNotEquals
entryRuleAttributeValueNotEquals returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeValueNotEqualsRule()); }
	 iv_ruleAttributeValueNotEquals=ruleAttributeValueNotEquals 
	 { $current=$iv_ruleAttributeValueNotEquals.current; } 
	 EOF 
;

// Rule AttributeValueNotEquals
ruleAttributeValueNotEquals returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_NOT_EQUAL_0=RULE_NOT_EQUAL
    { 
    newLeafNode(this_NOT_EQUAL_0, grammarAccess.getAttributeValueNotEqualsAccess().getNOT_EQUALTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeValueNotEqualsAccess().getConstraintSimpleExpressionConstraintParserRuleCall_1_0()); 
	    }
		lv_constraint_1_0=ruleSimpleExpressionConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeValueNotEqualsRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_1_0, 
        		"SimpleExpressionConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNestedExpression
entryRuleNestedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedExpressionRule()); }
	 iv_ruleNestedExpression=ruleNestedExpression 
	 { $current=$iv_ruleNestedExpression.current; } 
	 EOF 
;

// Rule NestedExpression
ruleNestedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_ROUND_OPEN_0=RULE_ROUND_OPEN
    { 
    newLeafNode(this_ROUND_OPEN_0, grammarAccess.getNestedExpressionAccess().getROUND_OPENTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNestedExpressionAccess().getNestedExpressionConstraintParserRuleCall_1_0()); 
	    }
		lv_nested_1_0=ruleExpressionConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNestedExpressionRule());
	        }
       		set(
       			$current, 
       			"nested",
        		lv_nested_1_0, 
        		"ExpressionConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)this_ROUND_CLOSE_2=RULE_ROUND_CLOSE
    { 
    newLeafNode(this_ROUND_CLOSE_2, grammarAccess.getNestedExpressionAccess().getROUND_CLOSETerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleSnomedIdentifier
entryRuleSnomedIdentifier returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSnomedIdentifierRule()); } 
	 iv_ruleSnomedIdentifier=ruleSnomedIdentifier 
	 { $current=$iv_ruleSnomedIdentifier.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SnomedIdentifier
ruleSnomedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_DIGIT_NONZERO_0=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_0);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_0, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_0()); 
    }
(    this_DIGIT_NONZERO_1=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_1);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_1, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_1_0()); 
    }

    |    this_ZERO_2=RULE_ZERO    {
		$current.merge(this_ZERO_2);
    }

    { 
    newLeafNode(this_ZERO_2, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_1_1()); 
    }
)(    this_DIGIT_NONZERO_3=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_3);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_3, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_2_0()); 
    }

    |    this_ZERO_4=RULE_ZERO    {
		$current.merge(this_ZERO_4);
    }

    { 
    newLeafNode(this_ZERO_4, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_2_1()); 
    }
)(    this_DIGIT_NONZERO_5=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_5);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_5, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_3_0()); 
    }

    |    this_ZERO_6=RULE_ZERO    {
		$current.merge(this_ZERO_6);
    }

    { 
    newLeafNode(this_ZERO_6, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_3_1()); 
    }
)(    this_DIGIT_NONZERO_7=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_7);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_7, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_4_0()); 
    }

    |    this_ZERO_8=RULE_ZERO    {
		$current.merge(this_ZERO_8);
    }

    { 
    newLeafNode(this_ZERO_8, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_4_1()); 
    }
)(    this_DIGIT_NONZERO_9=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_9);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_9, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_5_0()); 
    }

    |    this_ZERO_10=RULE_ZERO    {
		$current.merge(this_ZERO_10);
    }

    { 
    newLeafNode(this_ZERO_10, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_5_1()); 
    }
)+)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTerm
entryRuleTerm returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTermRule()); } 
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Term
ruleTerm returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getTermAccess().getTermCharacterParserRuleCall_0()); 
    }
    this_TermCharacter_0=ruleTermCharacter    {
		$current.merge(this_TermCharacter_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+((    this_WS_1=RULE_WS    {
		$current.merge(this_WS_1);
    }

    { 
    newLeafNode(this_WS_1, grammarAccess.getTermAccess().getWSTerminalRuleCall_1_0()); 
    }
)+(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getTermCharacterParserRuleCall_1_1()); 
    }
    this_TermCharacter_2=ruleTermCharacter    {
		$current.merge(this_TermCharacter_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)*)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTermCharacter
entryRuleTermCharacter returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getTermCharacterRule()); } 
	 iv_ruleTermCharacter=ruleTermCharacter 
	 { $current=$iv_ruleTermCharacter.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TermCharacter
ruleTermCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_LT_0=RULE_LT    {
		$current.merge(this_LT_0);
    }

    { 
    newLeafNode(this_LT_0, grammarAccess.getTermCharacterAccess().getLTTerminalRuleCall_0()); 
    }

    |    this_GT_1=RULE_GT    {
		$current.merge(this_GT_1);
    }

    { 
    newLeafNode(this_GT_1, grammarAccess.getTermCharacterAccess().getGTTerminalRuleCall_1()); 
    }

    |    this_DBL_LT_2=RULE_DBL_LT    {
		$current.merge(this_DBL_LT_2);
    }

    { 
    newLeafNode(this_DBL_LT_2, grammarAccess.getTermCharacterAccess().getDBL_LTTerminalRuleCall_2()); 
    }

    |    this_DBL_GT_3=RULE_DBL_GT    {
		$current.merge(this_DBL_GT_3);
    }

    { 
    newLeafNode(this_DBL_GT_3, grammarAccess.getTermCharacterAccess().getDBL_GTTerminalRuleCall_3()); 
    }

    |    this_LT_EM_4=RULE_LT_EM    {
		$current.merge(this_LT_EM_4);
    }

    { 
    newLeafNode(this_LT_EM_4, grammarAccess.getTermCharacterAccess().getLT_EMTerminalRuleCall_4()); 
    }

    |    this_GT_EM_5=RULE_GT_EM    {
		$current.merge(this_GT_EM_5);
    }

    { 
    newLeafNode(this_GT_EM_5, grammarAccess.getTermCharacterAccess().getGT_EMTerminalRuleCall_5()); 
    }

    |    this_AND_6=RULE_AND    {
		$current.merge(this_AND_6);
    }

    { 
    newLeafNode(this_AND_6, grammarAccess.getTermCharacterAccess().getANDTerminalRuleCall_6()); 
    }

    |    this_OR_7=RULE_OR    {
		$current.merge(this_OR_7);
    }

    { 
    newLeafNode(this_OR_7, grammarAccess.getTermCharacterAccess().getORTerminalRuleCall_7()); 
    }

    |    this_NOT_8=RULE_NOT    {
		$current.merge(this_NOT_8);
    }

    { 
    newLeafNode(this_NOT_8, grammarAccess.getTermCharacterAccess().getNOTTerminalRuleCall_8()); 
    }

    |    this_ZERO_9=RULE_ZERO    {
		$current.merge(this_ZERO_9);
    }

    { 
    newLeafNode(this_ZERO_9, grammarAccess.getTermCharacterAccess().getZEROTerminalRuleCall_9()); 
    }

    |    this_DIGIT_NONZERO_10=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_10);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_10, grammarAccess.getTermCharacterAccess().getDIGIT_NONZEROTerminalRuleCall_10()); 
    }

    |    this_LETTER_11=RULE_LETTER    {
		$current.merge(this_LETTER_11);
    }

    { 
    newLeafNode(this_LETTER_11, grammarAccess.getTermCharacterAccess().getLETTERTerminalRuleCall_11()); 
    }

    |    this_CARET_12=RULE_CARET    {
		$current.merge(this_CARET_12);
    }

    { 
    newLeafNode(this_CARET_12, grammarAccess.getTermCharacterAccess().getCARETTerminalRuleCall_12()); 
    }

    |    this_EQUAL_13=RULE_EQUAL    {
		$current.merge(this_EQUAL_13);
    }

    { 
    newLeafNode(this_EQUAL_13, grammarAccess.getTermCharacterAccess().getEQUALTerminalRuleCall_13()); 
    }

    |    this_PLUS_14=RULE_PLUS    {
		$current.merge(this_PLUS_14);
    }

    { 
    newLeafNode(this_PLUS_14, grammarAccess.getTermCharacterAccess().getPLUSTerminalRuleCall_14()); 
    }

    |    this_CURLY_OPEN_15=RULE_CURLY_OPEN    {
		$current.merge(this_CURLY_OPEN_15);
    }

    { 
    newLeafNode(this_CURLY_OPEN_15, grammarAccess.getTermCharacterAccess().getCURLY_OPENTerminalRuleCall_15()); 
    }

    |    this_CURLY_CLOSE_16=RULE_CURLY_CLOSE    {
		$current.merge(this_CURLY_CLOSE_16);
    }

    { 
    newLeafNode(this_CURLY_CLOSE_16, grammarAccess.getTermCharacterAccess().getCURLY_CLOSETerminalRuleCall_16()); 
    }

    |    this_ROUND_OPEN_17=RULE_ROUND_OPEN    {
		$current.merge(this_ROUND_OPEN_17);
    }

    { 
    newLeafNode(this_ROUND_OPEN_17, grammarAccess.getTermCharacterAccess().getROUND_OPENTerminalRuleCall_17()); 
    }

    |    this_ROUND_CLOSE_18=RULE_ROUND_CLOSE    {
		$current.merge(this_ROUND_CLOSE_18);
    }

    { 
    newLeafNode(this_ROUND_CLOSE_18, grammarAccess.getTermCharacterAccess().getROUND_CLOSETerminalRuleCall_18()); 
    }

    |    this_SQUARE_OPEN_19=RULE_SQUARE_OPEN    {
		$current.merge(this_SQUARE_OPEN_19);
    }

    { 
    newLeafNode(this_SQUARE_OPEN_19, grammarAccess.getTermCharacterAccess().getSQUARE_OPENTerminalRuleCall_19()); 
    }

    |    this_SQUARE_CLOSE_20=RULE_SQUARE_CLOSE    {
		$current.merge(this_SQUARE_CLOSE_20);
    }

    { 
    newLeafNode(this_SQUARE_CLOSE_20, grammarAccess.getTermCharacterAccess().getSQUARE_CLOSETerminalRuleCall_20()); 
    }

    |    this_DOT_21=RULE_DOT    {
		$current.merge(this_DOT_21);
    }

    { 
    newLeafNode(this_DOT_21, grammarAccess.getTermCharacterAccess().getDOTTerminalRuleCall_21()); 
    }

    |    this_COLON_22=RULE_COLON    {
		$current.merge(this_COLON_22);
    }

    { 
    newLeafNode(this_COLON_22, grammarAccess.getTermCharacterAccess().getCOLONTerminalRuleCall_22()); 
    }

    |    this_COMMA_23=RULE_COMMA    {
		$current.merge(this_COMMA_23);
    }

    { 
    newLeafNode(this_COMMA_23, grammarAccess.getTermCharacterAccess().getCOMMATerminalRuleCall_23()); 
    }

    |    this_REVERSED_24=RULE_REVERSED    {
		$current.merge(this_REVERSED_24);
    }

    { 
    newLeafNode(this_REVERSED_24, grammarAccess.getTermCharacterAccess().getREVERSEDTerminalRuleCall_24()); 
    }

    |    this_OTHER_CHARACTER_25=RULE_OTHER_CHARACTER    {
		$current.merge(this_OTHER_CHARACTER_25);
    }

    { 
    newLeafNode(this_OTHER_CHARACTER_25, grammarAccess.getTermCharacterAccess().getOTHER_CHARACTERTerminalRuleCall_25()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAndOperator
entryRuleAndOperator returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getAndOperatorRule()); } 
	 iv_ruleAndOperator=ruleAndOperator 
	 { $current=$iv_ruleAndOperator.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AndOperator
ruleAndOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_AND_0=RULE_AND    {
		$current.merge(this_AND_0);
    }

    { 
    newLeafNode(this_AND_0, grammarAccess.getAndOperatorAccess().getANDTerminalRuleCall_0()); 
    }

    |    this_COMMA_1=RULE_COMMA    {
		$current.merge(this_COMMA_1);
    }

    { 
    newLeafNode(this_COMMA_1, grammarAccess.getAndOperatorAccess().getCOMMATerminalRuleCall_1()); 
    }
)
    ;
finally {
	myHiddenTokenState.restore();
}





RULE_REVERSED : 'R';

RULE_AND : 'AND';

RULE_OR : 'OR';

RULE_MINUS : 'MINUS';

RULE_ZERO : '0';

RULE_DIGIT_NONZERO : '1'..'9';

RULE_LETTER : ('a'..'z'|'A'..'Z');

RULE_PIPE : '|';

RULE_COLON : ':';

RULE_CURLY_OPEN : '{';

RULE_CURLY_CLOSE : '}';

RULE_COMMA : ',';

RULE_ROUND_OPEN : '(';

RULE_ROUND_CLOSE : ')';

RULE_SQUARE_OPEN : '[';

RULE_SQUARE_CLOSE : ']';

RULE_PLUS : '+';

RULE_CARET : '^';

RULE_NOT : '!';

RULE_DOT : '.';

RULE_WILDCARD : '*';

RULE_EQUAL : '=';

RULE_NOT_EQUAL : '!=';

RULE_LT : '<';

RULE_GT : '>';

RULE_DBL_LT : '<<';

RULE_DBL_GT : '>>';

RULE_LT_EM : '<!';

RULE_GT_EM : '>!';

RULE_WS : (' '|'\t'|'\n'|'\r');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_OTHER_CHARACTER : ~('|');


