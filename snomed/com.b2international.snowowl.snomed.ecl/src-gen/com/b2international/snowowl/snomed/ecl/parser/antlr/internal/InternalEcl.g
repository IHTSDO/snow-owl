/*
 * generated by Xtext
 */
grammar InternalEcl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.b2international.snowowl.snomed.ecl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.b2international.snowowl.snomed.ecl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.b2international.snowowl.snomed.ecl.services.EclGrammarAccess;

}

@parser::members {

 	private EclGrammarAccess grammarAccess;
 	
    public InternalEclParser(TokenStream input, EclGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Expression";	
   	}
   	
   	@Override
   	protected EclGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_SL_COMMENT", "RULE_ML_COMMENT");
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getExpressionConceptReferenceParserRuleCall_0()); 
	    }
		lv_expression_0_0=ruleConceptReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"ConceptReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleConceptReference
entryRuleConceptReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConceptReferenceRule()); }
	 iv_ruleConceptReference=ruleConceptReference 
	 { $current=$iv_ruleConceptReference.current; } 
	 EOF 
;

// Rule ConceptReference
ruleConceptReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getConceptReferenceAccess().getIdSnomedIdentifierParserRuleCall_0()); 
	    }
		lv_id_0_0=ruleSnomedIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConceptReferenceRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"SnomedIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSnomedIdentifier
entryRuleSnomedIdentifier returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getSnomedIdentifierRule()); } 
	 iv_ruleSnomedIdentifier=ruleSnomedIdentifier 
	 { $current=$iv_ruleSnomedIdentifier.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SnomedIdentifier
ruleSnomedIdentifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_DIGIT_NONZERO_0=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_0);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_0, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_0()); 
    }
(    this_DIGIT_NONZERO_1=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_1);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_1, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_1_0()); 
    }

    |    this_ZERO_2=RULE_ZERO    {
		$current.merge(this_ZERO_2);
    }

    { 
    newLeafNode(this_ZERO_2, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_1_1()); 
    }
)(    this_DIGIT_NONZERO_3=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_3);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_3, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_2_0()); 
    }

    |    this_ZERO_4=RULE_ZERO    {
		$current.merge(this_ZERO_4);
    }

    { 
    newLeafNode(this_ZERO_4, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_2_1()); 
    }
)(    this_DIGIT_NONZERO_5=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_5);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_5, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_3_0()); 
    }

    |    this_ZERO_6=RULE_ZERO    {
		$current.merge(this_ZERO_6);
    }

    { 
    newLeafNode(this_ZERO_6, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_3_1()); 
    }
)(    this_DIGIT_NONZERO_7=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_7);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_7, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_4_0()); 
    }

    |    this_ZERO_8=RULE_ZERO    {
		$current.merge(this_ZERO_8);
    }

    { 
    newLeafNode(this_ZERO_8, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_4_1()); 
    }
)(    this_DIGIT_NONZERO_9=RULE_DIGIT_NONZERO    {
		$current.merge(this_DIGIT_NONZERO_9);
    }

    { 
    newLeafNode(this_DIGIT_NONZERO_9, grammarAccess.getSnomedIdentifierAccess().getDIGIT_NONZEROTerminalRuleCall_5_0()); 
    }

    |    this_ZERO_10=RULE_ZERO    {
		$current.merge(this_ZERO_10);
    }

    { 
    newLeafNode(this_ZERO_10, grammarAccess.getSnomedIdentifierAccess().getZEROTerminalRuleCall_5_1()); 
    }
)+)
    ;
finally {
	myHiddenTokenState.restore();
}





RULE_ZERO : '0';

RULE_DIGIT_NONZERO : '1'..'9';

RULE_WS : (' '|'\t'|'\n'|'\r');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;


