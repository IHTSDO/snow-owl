grammar com.b2international.snowowl.snomed.ecl.Ecl

generate ecl "http://www.b2international.com/snowowl/snomed/Ecl"

import 'http://www.eclipse.org/emf/2002/Ecore' as ecore

ExpressionConstraint hidden(WS, SL_COMMENT, ML_COMMENT):
	OrExpressionConstraint;

OrExpressionConstraint returns ExpressionConstraint:
	AndExpressionConstraint ({OrExpressionConstraint.left=current} OR right=AndExpressionConstraint)*;
	
AndExpressionConstraint returns ExpressionConstraint:
	ExclusionExpressionConstraint ({AndExpressionConstraint.left=current} (AND | COMMA) right=ExclusionExpressionConstraint)*;
	
ExclusionExpressionConstraint returns ExpressionConstraint:
	RefinedExpressionConstraint ({ExclusionExpressionConstraint.left=current} MINUS right=RefinedExpressionConstraint)?;

RefinedExpressionConstraint:
	constraint=SimpleExpressionConstraint (COLON refinement=Refinement)?;

SimpleExpressionConstraint returns ExpressionConstraint:
	ChildOf | DescendantOf | DescendantOrSelfOf | ParentOf | AncestorOf | AncestorOrSelfOf | FocusConcept;
	
FocusConcept returns ExpressionConstraint:
	MemberOf | ConceptReference | Any;

ChildOf:
	LT_EM constraint=(FocusConcept | NestableExpression);

DescendantOf:
	LT constraint=(FocusConcept | NestableExpression);

DescendantOrSelfOf:
	DBL_LT constraint=(FocusConcept | NestableExpression);

ParentOf:
	GT_EM constraint=(FocusConcept | NestableExpression);
	
AncestorOf:
	GT constraint=(FocusConcept | NestableExpression);
	
AncestorOrSelfOf:
	DBL_GT constraint=(FocusConcept | NestableExpression);

MemberOf:
	CARET constraint=(ConceptReference | Any);

ConceptReference: 
	id=SnomedIdentifier (PIPE term=Term PIPE)?;
	
Any: 
	WILDCARD {Any};

Refinement:
	AttributeConstraint;
	
AttributeConstraint returns Refinement:
	attribute=(ConceptReference | Any) comparison=Comparison;
	
Comparison:
	AttributeValueEquals | AttributeValueNotEquals /*| NumericValueComparison | StringValueComparison*/;

AttributeValueEquals:
	EQUAL constraint=SimpleExpressionConstraint;

AttributeValueNotEquals:
	NOT_EQUAL constraint=SimpleExpressionConstraint;
	
NestableExpression:
	ROUND_OPEN ExpressionConstraint ROUND_CLOSE;

// hidden grammar rules
SnomedIdentifier 	hidden() : DIGIT_NONZERO (DIGIT_NONZERO|ZERO)(DIGIT_NONZERO|ZERO)(DIGIT_NONZERO|ZERO)(DIGIT_NONZERO|ZERO)(DIGIT_NONZERO|ZERO)+;
Term 				hidden() : (TermCharacter)+ (WS+ (TermCharacter)+)*;
TermCharacter 		hidden() : LT|GT
								|DBL_LT|DBL_GT
								|AND|OR|NOT
								|ZERO|DIGIT_NONZERO
								|LETTER|CARET
								|EQUAL|PLUS
								|CURLY_OPEN|CURLY_CLOSE
								|ROUND_OPEN|ROUND_CLOSE
								|SQUARE_OPEN|SQUARE_CLOSE
								|DOT|COLON|COMMA
								|OTHER_CHARACTER;

// ---TERMINALS---

// bool operators
terminal AND 					: 'AND';
terminal OR 					: 'OR';
terminal MINUS					: 'MINUS';

// numeric terminals
terminal ZERO 					: '0';
terminal DIGIT_NONZERO  		: '1'..'9';

// character terminals
terminal LETTER					: ('a'..'z' | 'A'..'Z');
terminal PIPE 					: '|';
terminal COLON 					: ':';
terminal CURLY_OPEN 			: '{';
terminal CURLY_CLOSE			: '}';
terminal COMMA					: ',';
terminal ROUND_OPEN 			: '(';
terminal ROUND_CLOSE 			: ')';
terminal SQUARE_OPEN 			: '[';
terminal SQUARE_CLOSE 			: ']';
terminal PLUS 					: '+';
terminal CARET 					: '^';
terminal NOT 					: '!';
terminal DOT					: '.';
terminal WILDCARD 				: '*';
terminal EQUAL					: '=';
terminal NOT_EQUAL				: '!=';
terminal LT						: '<';
terminal GT						: '>';
terminal DBL_LT					: '<<';
terminal DBL_GT					: '>>';
terminal LT_EM					: '<!';
terminal GT_EM					: '>!';

// comment terminals
terminal WS 					: (' '|'\t'|'\n'|'\r');
terminal ML_COMMENT				: '/*' -> '*/';
terminal SL_COMMENT 			: '//' !('\n'|'\r')* ('\r'? '\n')?;

// misc
terminal OTHER_CHARACTER:		.;
