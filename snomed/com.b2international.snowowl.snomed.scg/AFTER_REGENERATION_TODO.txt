1. Add the following toString() implementations in generated model classes:

AttributeImpl.java
------------------

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated NOT
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer();
    result.append(name);
    result.append('=');
    
    if (value instanceof Expression) {
		/*
		 * 5.5.2 Canonical representations
		 * If a value contains nested refinements, the value is enclosed in
		 * round brackets (which may influence the sort order)
		 */
    	result.append('(');
    	result.append(value);
    	result.append(')');
    } else {
    	result.append(value);
    }
    
    return result.toString();
  }

ConceptImpl.java
----------------

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated NOT
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer();
    result.append(id);
    
    if (term != null && term.length() > 0) {
    	result.append("|" + term + "|");
    }
    
    return result.toString();
  }
  
ExpressionImpl.java
-------------------

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated NOT
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer();
    
    // get all LValue labels
    List<String> lValueLabels = new ArrayList<String>();
    for (Concept lValue : getConcepts()) {
		lValueLabels.add(lValue.toString());
	}
    // sort LValue labels
    Collections.sort(lValueLabels);
    
	for (Iterator<String> iterator = lValueLabels.iterator(); iterator.hasNext();) {
		result.append(iterator.next());
		if (iterator.hasNext())
			result.append('+');
	}
	// return if no refinements
    if (getAttributes().isEmpty() && getGroups().isEmpty()) {
    	return result.toString();
    }
    result.append(':');
    result.append(refinementsToString());
    return result.toString();
  }
  
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated NOT
   */
  private String refinementsToString()
  {
	StringBuffer result = new StringBuffer();
	// ungrouped attributes
	// get all attribute labels
	List<String> ungroupedAttributeLabels = new ArrayList<String>();
	for (Attribute ungroupedAttribute : getAttributes()) {
		ungroupedAttributeLabels.add(ungroupedAttribute.toString());
	}
	
	// sort attribute labels alphabetically
	Collections.sort(ungroupedAttributeLabels);
	
	for (Iterator<String> iterator = ungroupedAttributeLabels.iterator(); iterator.hasNext();) {
		String attributeLabel = (String) iterator.next();
		result.append(attributeLabel);
		if (iterator.hasNext())
			result.append(',');
	}
	// attribute groups
	List<String> attributeGroupLabels = new ArrayList<String>();
	// get all attribute groups labels
	for (Group attributeGroup : getGroups()) {
		attributeGroupLabels.add(attributeGroup.toString());
	}
	
	// sort attribute group labels
	Collections.sort(attributeGroupLabels);
	
	for (Iterator<String> iterator = attributeGroupLabels.iterator(); iterator.hasNext();) {
		result.append(iterator.next());
	}
	
	return result.toString();
  }
  
GroupImpl.java
--------------

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated NOT
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer();
    result.append('{');
    // get all attribute labels
    List<String> attributeLabels = new ArrayList<String>();
    for (Attribute attribute : getAttributes()) {
		attributeLabels.add(attribute.toString());
	}
    // sort attribute labels
    Collections.sort(attributeLabels);
    
    for (Iterator<String> iterator = attributeLabels.iterator(); iterator.hasNext();) {
		result.append(iterator.next());
		if (iterator.hasNext())
			result.append(',');
	}
    result.append('}');
    return result.toString();
  }
  
2. Organize imports
